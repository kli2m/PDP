// Iterable objects

// Перебираемые (или итерируемые) объекты – это концепция, которая позволяет использовать любой объект в цикле for..of.

// Symbol.iterator

let range = {
  from: 1,
  to: 5
};

// Чтобы сделать range итерируемым (и позволить for..of работать с ним), нам нужно добавить в объект метод с именем Symbol.iterator (специальный встроенный Symbol, созданный как раз для этого).
//  1)  Когда цикл for..of запускается, он вызывает этот метод один раз (или выдаёт ошибку, если метод не найден). Этот метод должен вернуть итератор – объект с методом next.
//  2)  Дальше for..of работает только с этим возвращённым объектом.
//  3)  Когда for..of хочет получить следующее значение, он вызывает метод next() этого объекта.
//  4)  Результат вызова next() должен иметь вид {done: Boolean, value: any}, где done=true означает, что итерация закончена, в противном случае value содержит очередное значение.

// 1. вызов for..of сначала вызывает эту функцию
range[Symbol.iterator] = function () {

  // ...она возвращает объект итератора:
  // 2. Далее, for..of работает только с этим итератором, запрашивая у него новые значения
  return {
    current: this.from,
    last: this.to,

    next() {
      // 3. next() вызывается на каждой итерации цикла for..of      
      if (this.current <= this.last) {                  //                      
        return { done: false, value: this.current++ };  //  4. он должен вернуть значение в виде объекта {done:.., value :...}            
      } else {                                          //
        return { done: true };                          //
      }                                                 //    
    }
  };
};

// теперь работает!
for (let num of range) {
  console.log(num); // 1, затем 2, 3, 4, 5
}


// Строка – перебираемый объект

// Для строки for..of перебирает символы:
for (let char of "test") {
  // срабатывает 4 раза: по одному для каждого символа
  console.log(char); // t, затем e, затем s, затем t
}


// Явный вызов итератора

let str = "Hello";

let iterator = str[Symbol.iterator]();

while (true) {
  let result = iterator.next();
  if (result.done) break;
  console.log(result.value); // выводит символы один за другим
}


// Итерируемые объекты и псевдомассивы

// Итерируемые объекты – это объекты, которые реализуют метод Symbol.iterator, как было описано выше.
// Псевдомассивы – это объекты, у которых есть индексы и свойство length, то есть, они выглядят как массивы.


// Array.from

//  Array.from(obj[, mapFn, thisArg]) принимает итерируемый объект или псевдомассив и делает из него «настоящий» Array. После этого мы уже можем использовать методы массивов.
// - obj итерируемый объект
// - mapFn может быть функцией, которая будет применена к каждому элементу перед добавлением в массив
// - thisArg позволяет установить this для функции mapFn
let arrayLike = {
  0: "Hello",
  1: "World",
  length: 2
};

let arr = Array.from(arrayLike);
console.log(arr.pop()); // World (метод работает)
