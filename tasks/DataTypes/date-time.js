// Дата и время

// Date - содержит дату и время, а также предоставляет методы управления ими.


// Создание

// Без аргументов – создать объект Date с текущими датой и временем:
console.log(new Date())  // показывает текущие дату и время


// С аргументами

// new Date(milliseconds) - Создает объект Date с временем, равным количеству миллисекунд (тысячная доля секунды), прошедших с 1 января 1970 года UTC+0.
console.log(new Date(0)) // Thu Jan 01 1970 03:00:00 GMT+0300 (Москва, стандартное время)

// Датам до 1 января 1970 будут соответствовать отрицательные таймстампы, например:
console.log(new Date(-24 * 3600 * 1000)) // Wed Dec 31 1969 03:00:00 GMT+0300 (Москва, стандартное время)

// new Date(datestring)

// Если аргумент всего один, и это строка, то из неё «прочитывается» дата
console.log(new Date("2017-01-26")) // Thu Jan 26 2017 03:00:00 GMT+0300 (Москва, стандартное время)

// new Date(year, month, date, hours, minutes, seconds, ms)

// Создать объект Date с заданными компонентами в местном часовом поясе. Обязательны только первые два аргумента.
// - year должен состоять из четырёх цифр: значение 2013 корректно, 98 – нет.
// - month начинается с 0 (январь) по 11 (декабрь).
// - Параметр date здесь представляет собой день месяца. Если параметр не задан, то принимается значение 1.
// - Если параметры hours/minutes/seconds/ms отсутствуют, их значением становится 0.
console.log(new Date(2011, 0, 1, 0, 0, 0, 0)) // Sat Jan 01 2011 00:00:00 GMT+0300 (Москва, стандартное время)


// Получение компонентов даты

// getDay() - Вернуть день недели от 0 (воскресенье) до 6 (суббота).
console.log(new Date().getDay()) // 3

// getMonth() - Получить месяц, от 0 до 11.
console.log(new Date().getMonth()) // 7

// getFullYear() - Получить год (4 цифры)
console.log(new Date().getFullYear()) // 2021

// getDate() - Получить день месяца, от 1 до 31, что несколько противоречит названию метода.
console.log(new Date().getDate()) // 18

// getHours(), getMinutes(), getSeconds(), getMilliseconds() - Получить, соответственно, часы, минуты, секунды или миллисекунды.

// !!! Все вышеперечисленные методы возвращают значения в соответствии с местным часовым поясом.
// существуют и их UTC-варианты, возвращающие день, месяц, год для временной зоны UTC+0: getUTCFullYear(), getUTCMonth(), getUTCDay(). Для их использования требуется после "get" подставить "UTC".

// getTime() - Для заданной даты возвращает таймстамп – количество миллисекунд, прошедших с 1 января 1970 года UTC+0.
console.log(new Date().getTime()) //  1629275125012

// getTimezoneOffset() - Возвращает разницу в минутах между местным часовым поясом и UTC
console.log(new Date().getTimezoneOffset()) //   -180


// Установка компонентов даты

// Следующие методы позволяют установить компоненты даты и времени:
// setFullYear(year, [month], [date])
// setMonth(month, [date])
// setDate(date)
// setHours(hour, [min], [sec], [ms])
// setMinutes(min, [sec], [ms])
// setSeconds(sec, [ms])
// setMilliseconds(ms)
// setTime(milliseconds) (устанавливает дату в виде целого количества миллисекунд, прошедших с 01.01.1970 UTC)

// !!! У всех этих методов, кроме setTime(), есть UTC-вариант, например: setUTCHours().


// Автоисправление даты

// Автоисправление – можно устанавливать компоненты даты вне обычного диапазона значений, а объект сам себя исправит.
console.log(new Date(2013, 0, 32))  // Fri Feb 01 2013 00:00:00 GMT+0400 (Москва, стандартное время)


// Date.now()

// Date.now() - возвращает текущую метку времени.
// Семантически он эквивалентен new Date().getTime(), однако метод не создаёт промежуточный объект Date. Так что этот способ работает быстрее и не нагружает сборщик мусора.
console.log(Date.now()) // 1629276690523


// Разбор строки с датой

// Date.parse(str) считывает дату из строки.

// Формат строки должен быть следующим: YYYY-MM-DDTHH:mm:ss.sssZ, где:
// - YYYY-MM-DD – это дата: год-месяц-день.
// - Символ "T" используется в качестве разделителя.
// - HH:mm:ss.sss – время: часы, минуты, секунды и миллисекунды.
// - Необязательная часть 'Z' обозначает часовой пояс в формате +-hh:mm. Если указать просто букву Z, то получим UTC+0.

//!!! Вызов Date.parse(str) обрабатывает строку в заданном формате и возвращает таймстамп (количество миллисекунд с 1 января 1970 года UTC+0). Если формат неправильный, возвращается NaN.

let ms = Date.parse('2012-01-26T13:51:50.417-07:00');
console.log(ms); // 1327611110417 (таймстамп)

// Можно тут же создать объект new Date из таймстампа:

let date = new Date(Date.parse('2012-01-26T13:51:50.417-07:00'));
console.log(date);  // Fri Jan 27 2012 00:51:50 GMT+0400 (Москва, стандартное время)


// Tasks

// 1) Создайте дату
// Создайте объект Date для даты: 20 февраля 2012 года, 3 часа 12 минут. Временная зона – местная.
console.log(new Date(2012, 1, 20, 3, 12))

// 2) Покажите день недели
// Напишите функцию getWeekDay(date), показывающую день недели в коротком формате: «ПН», «ВТ», «СР», «ЧТ», «ПТ», «СБ», «ВС».
function getWeekDay(date) {
  let days = ['ВС', 'ПН', 'ВТ', 'СР', 'ЧТ', 'ПТ', 'СБ'];
  return days[date.getDay()];
}
let dateDay = new Date(2014, 0, 3); // 3 января 2014 года
console.log(getWeekDay(dateDay)); // ПТ

// 3) День недели в европейской нумерации
// В Европейских странах неделя начинается с понедельника (день номер 1), затем идёт вторник (номер 2) и 
// так до воскресенья (номер 7). Напишите функцию getLocalDay(date), которая возвращает «европейский» день 
// недели для даты date.

function getLocalDay(date) {
  let day = date.getDay();
  if (day === 0) { // день недели 0 (воскресенье) в европейской нумерации будет 7
    day = 7;
  }
  return day;
}

// 4) Какой день месяца был много дней назад?
// Создайте функцию getDateAgo(date, days), возвращающую число, которое было days дней назад от даты date.
// К примеру, если сегодня двадцатое число, то getDateAgo(new Date(), 1) вернёт девятнадцатое и 
// getDateAgo(new Date(), 2) – восемнадцатое.
function getDateAgo(mydate, days) {
  let dateCopy = new Date(date);
  dateCopy.setDate(mydate.getDate() - days);
  return dateCopy.getDate();
}
console.log(getDateAgo(new Date(), 5))  // 13

// 5) Последнее число месяца?
// Напишите функцию getLastDayOfMonth(year, month), возвращающую последнее число месяца. 
// Иногда это 30, 31 или даже февральские 28/29.
// year – год из четырёх цифр, например, 2012.
// month – месяц от 0 до 11.
function getLastDayOfMonth(year, month) {
  let date = new Date(year, month + 1, 0);
  return date.getDate();
}
console.log(getLastDayOfMonth(2013, 1)); // 28

// 6) Сколько сегодня прошло секунд?
// Напишите функцию getSecondsToday(), возвращающую количество секунд с начала сегодняшнего дня.
// Например, если сейчас 10:00, и не было перехода на зимнее/летнее время, то:
// getSecondsToday() == 36000 // (3600 * 10)
function getSecondsToday() {
  let now = new Date();
  // создаём объект с текущими днём/месяцем/годом
  let today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
  let diff = now - today; // разница в миллисекундах
  return Math.round(diff / 1000); // получаем секунды
}

console.log(getSecondsToday());

// 7) Сколько секунд осталось до завтра?
// Создайте функцию getSecondsToTomorrow(), возвращающую количество секунд до завтрашней даты.
function getSecondsToTomorrow() {
  let now = new Date();
  // завтрашняя дата
  let tomorrow = new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1);
  let diff = tomorrow - now; // разница в миллисекундах
  return Math.round(diff / 1000); // преобразуем в секунды
}
console.log(getSecondsToTomorrow());

// 8) Форматирование относительной даты
// Напишите функцию formatDate(date), форматирующую date по следующему принципу:
//    Если спустя date прошло менее 1 секунды, вывести "прямо сейчас".
//    В противном случае, если с date прошло меньше 1 минуты, вывести "n сек. назад".
//    В противном случае, если меньше часа, вывести "m мин. назад".
//    В противном случае, полная дата в формате "DD.MM.YY HH:mm". А именно: "день.месяц.год часы:минуты", всё в виде двух цифр, т.е. 31.12.16 10:00.
function formatDate(date) {
  let diff = new Date() - date; // разница в миллисекундах
  if (diff < 1000) { // меньше 1 секунды
    return 'прямо сейчас';
  }
  let sec = Math.floor(diff / 1000); // преобразовать разницу в секунды
  if (sec < 60) {
    return sec + ' сек. назад';
  }
  let min = Math.floor(diff / 60000); // преобразовать разницу в минуты
  if (min < 60) {
    return min + ' мин. назад';
  }
  // отформатировать дату
  // добавить ведущие нули к единственной цифре дню/месяцу/часам/минутам
  let d = date;
  d = [
    '0' + d.getDate(),
    '0' + (d.getMonth() + 1),
    '' + d.getFullYear(),
    '0' + d.getHours(),
    '0' + d.getMinutes()
  ].map(component => component.slice(-2)); // взять последние 2 цифры из каждой компоненты
  // соединить компоненты в дату
  return d.slice(0, 3).join('.') + ' ' + d.slice(3).join(':');
}
