// Массивы

// Для хранения упорядоченных коллекций существует особая структура данных, которая называется массив, Array

// Существует два варианта синтаксиса для создания пустого массива:
let arr = new Array(); // new Array вызывается с одним аргументом, который представляет собой число, он создаёт массив без элементов, но с заданной длиной.
let arr2 = ["Яблоко", "Апельсин", "Слива"];

// Элементы массива нумеруются, начиная с нуля.
console.log(arr2[2]) // "Слива"


// length

// Общее число элементов массива содержится в его свойстве length:
// Свойство length автоматически обновляется при изменении массива. Если быть точными, это не количество элементов массива,
// а наибольший цифровой индекс плюс один.
// Ещё один интересный факт о свойстве length – его можно перезаписать.
console.log(arr2.length) // 3


// В массиве могут храниться элементы любого типа.
let arr3 = ['Яблоко', { name: 'Джон' }, true, function () { console.log('привет'); }];
console.log(arr3[1].name); // Джон
arr3[3](); // привет

// pop - Удаляет последний элемент из массива и возвращает его:
console.log(arr2.pop()) // Слива

// push - Добавляет элемент в конец массива и возвращает индекс этого элемента:
console.log(arr2.push("Виноград")) // 3

// shift - Удаляет из массива первый элемент и возвращает его:
console.log(arr2.shift()) // Яблоко

// unshift - Добавляет элемент в начало массива:
console.log(arr2.unshift("Дыня")) // 3

console.log(arr2) // ["Дыня", "Апельсин", "Виноград"]

// Методы push/pop выполняются быстро, а методы shift/unshift – медленно.


// !!! Варианты неправильного применения массива:
//   - Добавление нечислового свойства, например: arr.test = 5.
//   - Создание «дыр», например: добавление arr[0], затем arr[1000] (между ними ничего нет).
//   - Заполнение массива в обратном порядке, например: arr[1000], arr[999] и т.д.


// Перебор элементов

// for

for (let i = 0; i < arr2.length; i++) {
  console.log(arr2[i]) // "Дыня", "Апельсин", "Виноград"
}

// for..of
// Цикл for..of не предоставляет доступа к номеру текущего элемента, только к его значению, но в большинстве случаев этого достаточно.
for (let fruit of arr2) {
  console.log(fruit) // "Дыня", "Апельсин", "Виноград"
}

// for..in
// Технически, так как массив является объектом, можно использовать и вариант for..in
// Но на самом деле это – плохая идея. Существуют скрытые недостатки этого способа:
// 1) Цикл for..in выполняет перебор всех свойств объекта, а не только цифровых.
// 2) Цикл for..in оптимизирован под произвольные объекты, не массивы, и поэтому в 10-100 раз медленнее. 
for (let key in arr2) {
  console.log(arr2[key]); // "Дыня", "Апельсин", "Виноград"
}


// toString
// Массивы по-своему реализуют метод toString, который возвращает список элементов, разделённых запятыми.
console.log(arr2.toString()) //  Дыня,Апельсин,Виноград

// !!! Массивы не имеют ни Symbol.toPrimitive, ни функционирующего valueOf, они реализуют только преобразование toString,
// !!! таким образом, здесь [] становится пустой строкой, [1] становится "1", а [1,2] становится "1,2".
